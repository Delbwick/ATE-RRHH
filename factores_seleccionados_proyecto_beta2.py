import streamlit as st
from google.oauth2 import service_account
from google.cloud import bigquery
import pandas as pd

# Configuraci√≥n de la p√°gina de Streamlit
st.set_page_config(page_title="RRHH del Norte - Selecci√≥n de Factores", page_icon="üìä")
st.title("RRHH del Norte - Selecci√≥n de Factores Espec√≠ficos y de Destino-Manual preliminar")

# HTML para mostrar el texto de desplazamiento
scrollable_text_html = """
<div style="width: 100%; max-height: 300px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background-color: #f9f9f9; border-radius: 5px;">
    <h3 style="font-family: Arial, sans-serif; font-size: 16px; color: #333333;">
        1. Qu√© es un libro de valoraci√≥n, para qu√© se utiliza y c√≥mo funciona.
    </h3>
    <p style="font-family: Arial, sans-serif; font-size: 14px; color: #555555; text-align: justify;">
       2.	El contenido del salario p√∫blico.
Cada empleado p√∫blico (funcionario o personal laboral) puede cobrar una cantidad diferente, como consecuencia de la suma de los diferentes conceptos retributivos: retribuciones b√°sicas -sueldo base, trienios-, y retribuciones complementarias -complemento de destino, complemento espec√≠fico-. Sin perjuicio de otros complementos -por resultados en la gesti√≥n o productividad- o percepci√≥n de gratificaciones extraordinarias, en caso de que los hubiera. (art. 122 LEPV).
La valoraci√≥n s√≥lo determina el complemento de destino y el complemento espec√≠fico, aunque del estudio de los puestos de trabajo se pueden extraer otras propuestas.
El grupo o categor√≠a en el que se clasifica un determinado puesto de trabajo est√° vinculado a los requisitos de titulaci√≥n para el acceso al puesto. Es decir, la titulaci√≥n de la persona no tiene importancia, sino la exigida para el acceso al puesto.
Atendiendo a la clasificaci√≥n del puesto le corresponder√°n unas retribuciones b√°sicas-sueldo y trienios*-. 
Los importes correspondientes a doce mensualidades (para el periodo enero a diciembre de 2024) en concepto de retribuciones b√°sicas, son los que se recogen a continuaci√≥n :
* Los trienios est√°n regulados por Udalhitz (art. 69). 
Grupo/subgrupo	Sueldo (euros)	Trienios (euros)
A1	15.922,80	612,84
A2	13.768,20	499,80
B	12.035,28	438,48
C1	10.337,52	378,36
C2	8.603,76	257,52
E	7.874,76	193,92


Y para cada una de las pagas extraordinarias de los meses de junio y diciembre (2024), en concepto de sueldo y	trienios, las siguientes cuant√≠as:

Grupo/subgrupo	Sueldo 
(euros)	Trienios 
(euros)
A1	818,82 	31,53
A2	836,78	30,37
B	866,84	31,60
C1	744,56	27,21
C2	710,44	21,24
E	656,23	16,16

La Ley 11/2022, de 1 de diciembre, del Empleo P√∫blico Vasco, establece en su art√≠culo 122, en relaci√≥n con el complemento del puesto de trabajo:
3.	El complemento de destino se fijar√° anualmente en los Presupuestos Generales de la Comunidad Aut√≥noma del Pa√≠s Vasco y ser√° el correspondiente al puesto de trabajo que se desempe√±e, de acuerdo con la estructura de niveles jer√°rquicos de responsabilidad que cada Administraci√≥n P√∫blica determine en funci√≥n de sus facultades organizativas.
Para la asignaci√≥n del nivel de complemento de destino se tendr√°n en cuenta:
‚Ä¢	Nivel de titulaci√≥n exigido
‚Ä¢	Nivel de coordinaci√≥n requerido por la relaci√≥n jer√°rquica o funcional del puesto
‚Ä¢	Responsabilidad, iniciativa y autonom√≠a en la toma de decisiones y en la adopci√≥n de medidas
‚Ä¢	Grado de complejidad de la informaci√≥n a procesar para el correcto desarrollo de las tareas propias del	puesto	de trabajo



4.	El mismo art√≠culo de la ley recoge que, el complemento espec√≠fico, que salvo norma o pacto en contrario ser√° √∫nico por cada puesto de trabajo que tenga asignado, retribuye las condiciones especiales de cada puesto de trabajo:
‚Ä¢	Dificultad t√©cnica especial.
‚Ä¢	Responsabilidad.
‚Ä¢	Dedicaci√≥n.
‚Ä¢	Penosidad o peligrosidad.
‚Ä¢	Y cualquier otra condici√≥n que se produzca en el puesto de trabajo.
Podr√° fijarse una cuant√≠a por el factor de incompatibilidad cuando para el desempe√±o de determinados puestos se requiera una dedicaci√≥n absoluta al servicio p√∫blico.
En ning√∫n caso podr√° percibirse el complemento espec√≠fico como retribuci√≥n consolidada, quedando condicionado el desempe√±o efectivo del puesto en las condiciones valoradas.
Las Administraciones P√∫blicas Vascas podr√°n asignar, en su caso, un complemento espec√≠fico a todos los puestos de trabajo de su organizaci√≥n. 
Las cuant√≠as del complemento de destino se fijar√°n en la norma presupuestaria de cada Administraci√≥n p√∫blica vasca, de acuerdo con los criterios que reglamentariamente establezca el √≥rgano correspondiente para su determinaci√≥n.

    </p>
</div>
"""
st.markdown(scrollable_text_html, unsafe_allow_html=True)

# Autenticaci√≥n y cliente de BigQuery
credentials = service_account.Credentials.from_service_account_info(
    st.secrets["gcp_service_account"]
)
client = bigquery.Client(credentials=credentials)

# Funci√≥n para obtener proyectos desde BigQuery
def get_proyectos():
    query = """
        SELECT id_projecto AS id, nombre
        FROM `ate-rrhh-2024.Ate_kaibot_2024.proyecto`
    """
    query_job = client.query(query)
    results = query_job.result()
    return [{'id': row.id, 'nombre': row.nombre} for row in results]

# Funci√≥n para obtener tablas que contienen la columna 'tipo_factor'
# Autenticaci√≥n y cliente de BigQuery
credentials = service_account.Credentials.from_service_account_info(
    st.secrets["gcp_service_account"]
)
client = bigquery.Client(credentials=credentials)

# Obtener todas las tablas y verificar si contienen tipo_factor
def get_tablas_con_tipo_factor():
    dataset_id = "YOUR_DATASET"  # Reemplaza con tu dataset en BigQuery
    project_id = "YOUR_PROJECT"  # Reemplaza con tu proyecto en BigQuery
    
    # Consulta para obtener todas las tablas del dataset
    tables_query = f"""
        SELECT table_name
        FROM `{project_id}.{dataset_id}.INFORMATION_SCHEMA.TABLES`
    """
    tables = client.query(tables_query).result()
    
    tablas_con_tipo_factor = []
    for table in tables:
        table_name = table.table_name
        # Consulta para verificar si `tipo_factor` est√° presente como clave en la tabla
        query = f"""
            SELECT COUNT(1) AS has_tipo_factor
            FROM `{project_id}.{dataset_id}.{table_name}`
            WHERE 'tipo_factor' IN UNNEST(REGEXP_EXTRACT_ALL(TO_JSON_STRING(t), r'"([a-zA-Z0-9_]+)"'))
        """
        result = client.query(query).result()
        if result and next(result).has_tipo_factor > 0:
            tablas_con_tipo_factor.append(table_name)
    
    return tablas_con_tipo_factor


# Funci√≥n para obtener complementos espec√≠ficos
def get_complementos_especificos(id_proyecto):
    query = f"""
        SELECT complemento_especifico
        FROM `ate-rrhh-2024.Ate_kaibot_2024.complemento_especifico_x_proyecto`
        WHERE id_proyecto = {id_proyecto}
    """
    query_job = client.query(query)
    results = query_job.result()
    return [row.complemento_especifico for row in results]

# Funci√≥n para obtener complementos de destino
def get_complementos_destino(id_proyecto):
    query = f"""
        SELECT complemento_destino
        FROM `ate-rrhh-2024.Ate_kaibot_2024.complemento_destino_x_proyecto`
        WHERE id_proyecto = {id_proyecto}
    """
    query_job = client.query(query)
    results = query_job.result()
    return [row.complemento_destino for row in results]

# Funci√≥n para obtener datos de la tabla espec√≠fica
def obtener_datos_tabla(nombre_tabla):
    query = f"SELECT * FROM `{nombre_tabla}` LIMIT 100"
    return client.query(query).result().to_dataframe().fillna('No disponible')

# Funci√≥n para crear una nueva tabla en BigQuery desde Streamlit
def crear_tabla_nueva():
    st.sidebar.subheader("Crear una nueva tabla de factores")
    table_name = st.sidebar.text_input("Nombre de la nueva tabla")
    num_columns = st.sidebar.number_input("N√∫mero de columnas", min_value=1, max_value=10)
    columns = []

    for i in range(int(num_columns)):
        col_name = st.sidebar.text_input(f"Nombre de la columna {i + 1}", key=f"col_name_{i}")
        col_type = st.sidebar.selectbox(f"Tipo de dato de la columna {i + 1}", ["STRING", "INTEGER", "FLOAT", "BOOLEAN", "TIMESTAMP"], key=f"col_type_{i}")
        columns.append((col_name, col_type))

    if st.sidebar.button("Crear Tabla"):
        if table_name and columns:
            cols_str = ", ".join([f"{name} {dtype}" for name, dtype in columns])
            query = f"CREATE TABLE `YOUR_PROJECT.YOUR_DATASET.{table_name}` ({cols_str})"
            client.query(query)
            st.sidebar.success("Tabla creada exitosamente")
        else:
            st.sidebar.error("Por favor, proporciona un nombre de tabla y al menos una columna.")

# Sidebar para selecci√≥n de proyecto y modificaci√≥n de factores
st.sidebar.title("Opciones de Proyecto")
st.sidebar.markdown("<h2>Selecciona el proyecto que quieres calcular</h2>", unsafe_allow_html=True)

# Obtener proyectos y configurar proyecto inicial
proyectos = get_proyectos()
proyectos_nombres = [proyecto['nombre'] for proyecto in proyectos]

# Obtener id_proyecto desde la URL si est√° disponible
id_proyecto_url = st.experimental_get_query_params().get('id_proyecto', [None])[0]
if id_proyecto_url:
    proyecto_inicial = next((proyecto['nombre'] for proyecto in proyectos if str(proyecto['id']) == id_proyecto_url), proyectos_nombres[0])
else:
    proyecto_inicial = proyectos_nombres[0]

# Crear el selectbox para proyectos en el sidebar
opcion_proyecto = st.sidebar.selectbox("Seleccione un Proyecto:", proyectos_nombres, index=proyectos_nombres.index(proyecto_inicial))

# Obtener el ID del proyecto seleccionado
id_proyecto_seleccionado = next((proyecto['id'] for proyecto in proyectos if proyecto['nombre'] == opcion_proyecto), None)

# Mostrar ID de proyecto seleccionado para verificaci√≥n
st.write(f"**ID del Proyecto Seleccionado**: {id_proyecto_seleccionado}")

# Listar tablas que contienen 'tipo_factor' y permitir selecci√≥n en el sidebar
st.sidebar.subheader("Gesti√≥n de Factores para el Proyecto")
tablas_con_tipo_factor = get_tablas_con_tipo_factor()
factores_seleccionados = st.sidebar.multiselect("Factores disponibles:", tablas_con_tipo_factor)

# Guardar factores seleccionados (puedes personalizar esta secci√≥n para almacenarlo en una base de datos)
if st.sidebar.button("Guardar selecci√≥n de factores"):
    st.write(f"Factores guardados para el proyecto: {factores_seleccionados}")

# Crear nueva tabla desde el sidebar
crear_tabla_nueva()

# Mostrar datos de tablas espec√≠ficas para el proyecto seleccionado
if id_proyecto_seleccionado:
    complementos_especificos = get_complementos_especificos(id_proyecto_seleccionado)
    if complementos_especificos:
        st.write("### Factores Espec√≠ficos del Proyecto")
        for nombre_tabla in complementos_especificos:
            st.write(f"**Tabla: {nombre_tabla}**")
            df_complemento_especifico = obtener_datos_tabla(f"ate-rrhh-2024.Ate_kaibot_2024.{nombre_tabla}")
            st.dataframe(df_complemento_especifico)
    else:
        st.write("No se encontraron complementos espec√≠ficos para el proyecto seleccionado.")
    
    complementos_destino = get_complementos_destino(id_proyecto_seleccionado)
    if complementos_destino:
        st.write("### Factores de Destino del Proyecto")
        for nombre_tabla in complementos_destino:
            st.write(f"**Tabla: {nombre_tabla}**")
            df_complemento_destino = obtener_datos_tabla(f"ate-rrhh-2024.Ate_kaibot_2024.{nombre_tabla}")
            st.dataframe(df_complemento_destino)
    else:
        st.write("No se encontraron complementos de destino para el proyecto seleccionado.")
